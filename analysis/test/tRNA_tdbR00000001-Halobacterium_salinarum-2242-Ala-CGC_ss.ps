%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.18
%%CreationDate: Thu Sep 29 19:09:36 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCGUAGAUCAGCGGUAGAUCGCUUCCUUCGCAAGGAAGAGGCCCUGGGUUCAAAUCCCAGCGAGUCCACCA\
) } def
/len { sequence length } bind def

/coor [
[121.97161102 217.83255005]
[119.50269318 203.03713989]
[117.03377533 188.24171448]
[114.56485748 173.44630432]
[112.09593964 158.65087891]
[109.62702179 143.85545349]
[107.15809631 129.06004333]
[89.98818970 128.15805054]
[76.17264557 117.96553802]
[70.26133728 101.87357330]
[55.46591568 104.34249115]
[40.67049789 106.81140900]
[25.87507629 109.28033447]
[18.08860016 122.84148407]
[3.38915825 128.17631531]
[-11.28262424 122.76587677]
[-18.99917793 109.16481781]
[-16.11698532 93.79513550]
[-3.99692607 83.91393280]
[11.63827610 84.18680573]
[23.40615845 94.48490906]
[38.20157623 92.01599121]
[52.99699783 89.54707336]
[67.79241943 87.07815552]
[76.25440979 74.69289398]
[73.17617798 60.01214218]
[70.09795380 45.33139038]
[67.01972198 30.65063858]
[63.94149017 15.96988487]
[58.98721695 7.94437933]
[61.05265808 0.61933941]
[58.58373642 -14.17607975]
[56.11481857 -28.97150040]
[43.94626236 -39.42643738]
[44.67725372 -55.45282745]
[57.74704742 -64.75659943]
[73.12960815 -60.20068741]
[79.02475739 -45.28000259]
[70.91024017 -31.44041824]
[73.37915802 -16.64499855]
[75.84807587 -1.84957945]
[78.62224579 12.89165497]
[81.70046997 27.57240868]
[84.77870178 42.25316238]
[87.85693359 56.93391418]
[90.93516541 71.61466217]
[117.53546143 75.82740021]
[129.92802429 99.80524445]
[144.87678528 98.56655884]
[159.82556152 97.32786560]
[174.77432251 96.08917236]
[189.72308350 94.85048676]
[198.60284424 81.97865295]
[213.69262695 77.87591553]
[227.86750793 84.47946167]
[234.43453979 98.67129517]
[230.29296875 113.75046539]
[217.39833069 122.59705353]
[201.83905029 121.03396606]
[190.96177673 109.79925537]
[176.01301575 111.03794098]
[161.06423950 112.27663422]
[146.11547852 113.51531982]
[131.16671753 114.75401306]
[121.95352173 126.59111786]
[124.42243958 141.38653564]
[126.89135742 156.18196106]
[129.36027527 170.97738647]
[131.82919312 185.77279663]
[134.29811096 200.56822205]
[136.76702881 215.36363220]
[148.93559265 225.81857300]
[148.20458984 241.84497070]
[135.13481140 251.14874268]
[119.75224304 246.59281921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[10 24]
[11 23]
[12 22]
[13 21]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[31 41]
[32 40]
[33 39]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
